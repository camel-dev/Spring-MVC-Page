코멘토 수업 첫번째

sw 개발자 

우선 저는 학교 생활을 하며 전공에 의문이 많았습니다. 
컴퓨터 공학이라는 특성상 SW /HW 를 폭 넓게 배웠기 때문에 진로를 선택함에 어려움이 있었습니다.
그래서 저는 블로그를 운영하면서 IT 관련 글을 주로 포스팅했으며, 주로 개발언어 관련 내용이 주를 이루었습니다.
블로그를 운영하면서 이러저러한 일이 있었습니다. 
그 과정에서 SW 개발에 더욱 흥미를 느끼게 되었고 그때부터 SW관련 학습을 이어왔습니다.

공공기관은 외주 개발자를 주로 두는 관리자 성향이 강한 조직이라는 점에서 귀사에 지원하게 됬습니다.

SW개발자의 고정업무
1. 서비스 요청 목록(SR) 확인
2. 서비스 요청 목록에 따른 업무 처리
3. SW개발

서비스 요청 목록이란 타 부서에서 어떤 업무를 요청하고 이를 수행하는 업무
예를들어 데이터베이스 권한이 나눠져 있고 서비스 단위로 업무가 나눠지게되는데
서비스가 서로 연관이 있을 경우 주로 발생합니다.
EX) DBA에게 DB 권한을 요청하는 행위

SW개발자의 변동업무
1. 업무 협의
2. 개발 스터디
3. 주간업무 작성

변동업무의 경우 업무 협의를 통해 개발/업무 다양한 계획을 회의하는 것입니다.

현업에서 스터디, 강의 수강 학습 또한 실적으로 작용합니다.
자격증 취득 및 파일럿 프로젝트 수행 또한 실적입니다.
따라서 SW개발직무는 배우는 것을 좋아하고 응용을 좋아하는 사람에게 적합한 직무입니다.
하지만 개발자들도 서로 잘하는 분야가 다르기에 서로에게서 배울점을 배우는 것이 중요하기 때문에, 이는 인간관계나 소통이 기반이 되어야한다고 생각합니다.

코딩시험 공부방법
스터디 활용 / 백준알고리즘, 프로그래머스, leetcode, hackerank

SW개발자의 구체적 직무
1. 퍼블리셔
디자이너와 개발자 영역의 중간에 있는 직무. 
HTML/CSS, JavaScript, jquery, vue, react

2. 프론트엔드
눈에 보이는 화면을 개발하는 개발자. 퍼블리셔가 만든 뼈대에 해당화면에서 사용할 데이터를 입힌다. DB의 데이터를 사용하기 때문에 백엔드 지식이 있으면 좋다.
HTML/CSS, JavaScript

3. 백엔드
서버단 개발자. DB를 자유롭게 사용할 수 있어야한다.
Java, PHP, node.js, DB

4. 풀스택
프론트엔드와 백엔드 개발 모두를 수행하는 개발자.

5. DevOps
개발한 내용을 배포 할 줄 아는 개발자. 운영체제를 잘 다루고 배포를 위한 jenkins와 같은 CI 소프트웨어에 능하면 좋다.

SW개발자 연차별 업무
CNS의 경우 교육이 잘 이뤄지기로 알려져 있다.
교육 -> 한 페이지-> 단독 서비스

SI기업의 특징을 판단할 때는 해당 그룹은 어떤 계열사를 가지고 있고 주력사업이 무엇인지 파악하는 것이 중요하다.

SW개발의 장점/단점
1. 하나에 집중할 수 있어야한다. 이것은 굉장히 답답하고 어려운 부분이다.
2. 지속적인 학습이 필요시 된다. 업무의 양이 많을 때는 버거울 수 있다. 또한 새로운걸 다시 공부한다는 것은 이전에 익현던 것들을 안쓰게 될 수가 있다는 것으로, 허탈감을 느낄 수 있다.
3. 모회사가 안정적이라면 SI업체 역시 안정적이다. 하지만 SI는 항상 을의 입장이다. 즉, 갑질당하기 쉽다.

장고나 node.js는 조직의 변화가 빠른 기업에서 주로 사용한다. 하지만 대기업에서도 새로운걸 계속해서 시도하는 R&D 조직에서 사용하기도 한다.

SI업체는 회사 직원들이 사용하는 SW를 만드는것이 대부분이다. 일반 사용자가 사용하는 SW와는 차이가 있다. 카카오톡의 경우 굉장히 많은 수의 사용자가 사용하는 SW이기에 트래픽이 많고 지속적인 유지보수가 필요한 반면, SI업체에서 개발하는 SW는 소수의 직원이 사용하는 SW이기에 트래픽이 많지 않아 왠만한 상황에서 무리가 없다.
 그렇기 때문에 카카옥톡과 같은 서비스의경우 사용자에게 얼마나 만족시킬 수 있는 성능으로 서비스를 제공할수 있냐가 중요하다. 



1주차 과제 
1. github 계정생성
2. Visual Studio Code 설치 (basic)
3. jquery, ploty 다운로드
4. jdk, Tomcat, mybatis, Eclipse 설치 (Advance)

  참고 : devfunpj.tistory.com

프로젝트 기획 
데이터에 접근해서 데이터를 화면에 차트로 뿌리는 작업. 
이를 위해서는 DB접근, restAPI, jquery, javascript에 대한 지식이 필요하다. 
실제 실무와 같이 만들어 직무에 대한 이해를 돕는 내용.
차트는 d3.js, ploty, highchart 등 오픈소스가 많다. 
2주차에는 d3.js를 통해 간단한 차트를 테스트하면서 프론트의 역할을 이해한다.
3주차에는 api 구현을 통해 백엔드의 역할을 이해한다.,
4주차에는 2,3주차의 내용을 통합해 자율 주제로 직접 차트를 그린다. 

2주차에는 인터페이스 가이드라는 샘플문서를 전달할 것.
인터페이스 가이드는 차트를 그리기위한 데이터 포맷을 데이터 제공을 해주는 팀과 API를 제공해주는 팀간의 약속을 위한 문서이다. 
실무에서 어떤 식으로 문서로 API규칙을 만들어 놓는 지 알수 있는 기회가 될 것이다. 

3주차에서는 RestfulAPI , 스프링에서는 자원에 접근하는 방법인 API를 RestController 라는 어노테이션으로 기능을 만들 수 있다. 
이 RestfulAPI를 간단히 실습하고 백엔드에 대한 이해를 한다.

코드로 배우는 스프링 웹 프로젝트 - 스프링 기초 위주
 Spring in Action - 스프링 원리 파악
토비의 스프링 3.1 세트 - 추천하는 사람은 많지만 매우 두꺼움. 어느정도 공부하고 추천

포트폴리오 및 readme 작성 
https://sujinlee.me/professional-github/
github.com/huisoo/CustomerTransaction


2번째 세션
다른팀이나 혹은 외부고객이 데이터를 가져가기 위해 서버에 접근할 때 어떤식으로 접근을 해야할지 문서를 남겨놔야 공유가 수월하다.
RESTful API 
API 컨텐츠 타입 검색하면 자료를 찾아 볼 수 있다. 

d3.csv 라고 문서에 작성할 필요없다. 차트를 그릴때 x축 y축에 대해 규칙(포맷)을 지키지 않으면 그릴 수 없음을 알려주면된다. 
어떻게 데이터를 주고 받을것인지 규칙을 문서로 기록해야한다.
d3의 버전에 대해서는 크게 정형화된 버전은 없다. 회사마다 다르다. 
라이브러리를 추가할때 웹에서 가져오는 형태로 사용했지만, 실무에서는 웹에서 가져오는 형태로 추가하지 않는다. 온전히 라이브러리를 가져와서 소스에 넣는다. 그 이유는 폐쇄망에서 개발할 경우에 대비해서이다. 외부에서 라이브러리를 가져올 경우 라이브러리가 에러가 나면 페이지까지 에러가 날 수 있다. 

테스트 단계에서는 스프링이아니라 다이나믹 웹프로젝트에서 테스트하는게 일반적이다. 

웹브라우저가 열려있을 때 크롬 개발자도구를 사용하면 쉽게 개발할 수 있기도 하다. 개발자도구에서 코드 변경 시 실제 소스에 반영되지는 않지만 화면에서 어떻게 변하는지 확인할 수 있기에 간단한 테스트에 사용한다.

 jsfiddle, 온라인 에디터, 직접 구현할 기능을 간단하게 작성해서 검증, 확인할 수 있다. 

스프링 버전은 5 버전으로 셋팅했지만, 실제로 스프링버전은 회사마다 다르지만 보통 3점대 버전이나 4점대초반 버전을 사용하는 경향있다. 
안정성 때문에 저버전의 스프링을 사용한다. 그리고 레퍼런스가 많은 장점도 있다.  
하지만 버전을 올리는 작업은 굉장히 더디다. 카카오나 토스와 같은 서비스 중심의 회사의 경우에는 높은 버전의 스프링을 추구한다. 
그 이유는 빠른 개발과 많은 사용자를 커버할 수 있는 기술이 있는 확률이 높다.  

JDK의 경우에도 마찬가지다.

DB를 간편하게 사용하기 위해 Mybatis를 사용. 그 외에 많이 사용하는 JPA도 있다. 최근에는 JPA를 많이 사용하기도한다. 
기존 구축된 시스템의 경우에는 Mybatis가 많기 때문에 둘다 혼용해서 써야한다. 

MVC 패턴은 사용자 인터페이스로부터 비즈니스 로직과 프레젠테이션 로직의 분리가 목적이다. 
이때 프론트컴트롤러를 두는 것이 스프링이다. 프론트 컨트롤러는 사전처리를 위한 부분이다.

디스패처 서블릿은 웹과 관련된 정의를 하는곳. 여러개가 존재할 수 도 있다(PC/Mobile...) / 공톱업무에 대한 코드를 작성할 때 filter AOP 개념이 필요하다.
인터셉터는 디스패처 서블릿을 지나서 컨트롤러의 중간 단계에서 타는것
필터는 요청이 들어오자마자 수행

AOP 컨트롤러 안에 정의되어있는 각각의 함수에서 공통된 부분을 하나의 영역으로 빼서 
 
REST API meetup.toast.com/posts/92

크로스브라우징, 크로스 도메인

https://m.blog.naver.com/heartflow89/221103824012

https://kookyungmin.github.io/server/2018/08/31/spring_28/

https://doublesprogramming.tistory.com/112?category=736879

https://walbatrossw.github.io/spring-mvc/2017/11/28/01-spring-mvc-board-setting.html 

2.7

Secure Socket Tunneling Protocol Service
Workstation
Remote Access Connection Manager